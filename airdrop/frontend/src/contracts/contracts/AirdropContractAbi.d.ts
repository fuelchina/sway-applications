/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.89.2
  Forc version: 0.60.0
  Fuel-Core version: 0.27.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum AccessErrorInput { CallerNotAdmin = 'CallerNotAdmin', NotEnoughCoins = 'NotEnoughCoins', UserAlreadyClaimed = 'UserAlreadyClaimed' };
export enum AccessErrorOutput { CallerNotAdmin = 'CallerNotAdmin', NotEnoughCoins = 'NotEnoughCoins', UserAlreadyClaimed = 'UserAlreadyClaimed' };
export type ClaimStateInput = Enum<{ Unclaimed: [], Claimed: BigNumberish }>;
export type ClaimStateOutput = Enum<{ Unclaimed: [], Claimed: BN }>;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitErrorInput { AlreadyInitialized = 'AlreadyInitialized', CannotAirdropZeroCoins = 'CannotAirdropZeroCoins' };
export enum InitErrorOutput { AlreadyInitialized = 'AlreadyInitialized', CannotAirdropZeroCoins = 'CannotAirdropZeroCoins' };
export enum ProofErrorInput { InvalidKey = 'InvalidKey', InvalidProofLength = 'InvalidProofLength' };
export enum ProofErrorOutput { InvalidKey = 'InvalidKey', InvalidProofLength = 'InvalidProofLength' };
export enum StateErrorInput { ClaimPeriodNotActive = 'ClaimPeriodNotActive', ClaimPeriodActive = 'ClaimPeriodActive' };
export enum StateErrorOutput { ClaimPeriodNotActive = 'ClaimPeriodNotActive', ClaimPeriodActive = 'ClaimPeriodActive' };
export enum VerificationErrorInput { MerkleProofFailed = 'MerkleProofFailed' };
export enum VerificationErrorOutput { MerkleProofFailed = 'MerkleProofFailed' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ClaimEventInput = { amount: BigNumberish, claimer: IdentityInput, to: IdentityInput };
export type ClaimEventOutput = { amount: BN, claimer: IdentityOutput, to: IdentityOutput };
export type ClawbackEventInput = { amount: BigNumberish, to: IdentityInput };
export type ClawbackEventOutput = { amount: BN, to: IdentityOutput };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type CreateAirdropEventInput = { admin: IdentityInput, asset: AssetIdInput, end_block: BigNumberish, merkle_root: string, number_of_leaves: BigNumberish };
export type CreateAirdropEventOutput = { admin: IdentityOutput, asset: AssetIdOutput, end_block: number, merkle_root: string, number_of_leaves: BN };

interface AirdropContractAbiInterface extends Interface {
  functions: {
    claim: FunctionFragment;
    clawback: FunctionFragment;
    constructor: FunctionFragment;
    admin: FunctionFragment;
    claim_data: FunctionFragment;
    end_block: FunctionFragment;
    is_active: FunctionFragment;
    merkle_root: FunctionFragment;
    number_of_leaves: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'claim', values: [BigNumberish, BigNumberish, Vec<string>, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'clawback', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'constructor', values: [IdentityInput, BigNumberish, string, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'admin', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'claim_data', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'end_block', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'is_active', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'merkle_root', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'number_of_leaves', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'claim', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'clawback', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'admin', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'claim_data', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'end_block', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'is_active', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'merkle_root', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'number_of_leaves', data: BytesLike): DecodedValue;
}

export class AirdropContractAbi extends Contract {
  interface: AirdropContractAbiInterface;
  functions: {
    claim: InvokeFunction<[amount: BigNumberish, key: BigNumberish, proof: Vec<string>, to: IdentityInput], void>;
    clawback: InvokeFunction<[], void>;
    constructor: InvokeFunction<[admin: IdentityInput, claim_time: BigNumberish, merkle_root: string, number_of_leaves: BigNumberish], void>;
    admin: InvokeFunction<[], Option<IdentityOutput>>;
    claim_data: InvokeFunction<[identity: IdentityInput], ClaimStateOutput>;
    end_block: InvokeFunction<[], number>;
    is_active: InvokeFunction<[], boolean>;
    merkle_root: InvokeFunction<[], Option<string>>;
    number_of_leaves: InvokeFunction<[], BN>;
  };
}
